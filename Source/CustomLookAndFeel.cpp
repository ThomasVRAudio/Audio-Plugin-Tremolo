/*
  ==============================================================================

    CustomLookAndFeel.cpp
    Created: 18 Feb 2023 7:50:26pm
    Author:  thoma

  ==============================================================================
*/

#include "CustomLookAndFeel.h"

CustomLookAndFeel::CustomLookAndFeel()
{
    static const unsigned char pathData[] = { 110,109,158,217,68,65,36,213,58,181,108,158,217,68,65,0,0,128,181,108,253,2,59,65,0,228,123,60,108,167,50,49,65,0,194,123,61,108,229,110,39,65,64,119,13,62,108,245,189,29,65,64,33,123,62,108,11,38,20,65,192,211,195,62,108,75,173,10,65,32,172,12,63,108,
    196,89,1,65,176,243,62,63,108,219,98,240,64,96,160,120,63,108,72,116,222,64,168,198,156,63,108,72,243,204,64,128,200,192,63,108,14,235,187,64,160,62,232,63,108,129,102,171,64,228,135,9,64,108,50,112,155,64,84,144,32,64,108,88,18,140,64,212,41,57,64,108,
    140,173,122,64,180,68,83,64,108,220,141,94,64,56,208,110,64,108,152,215,67,64,96,221,133,64,108,216,155,42,64,231,248,148,64,108,192,234,18,64,5,177,164,64,108,248,166,249,63,172,251,180,64,108,104,200,208,63,112,206,197,64,108,224,83,171,63,138,30,215,
    64,108,96,97,137,63,234,224,232,64,108,64,13,86,63,49,10,251,64,108,32,174,32,63,96,199,6,65,108,0,143,229,62,96,49,16,65,108,160,237,152,62,17,189,25,65,108,0,82,55,62,88,100,35,65,108,0,161,183,61,7,33,45,65,108,0,140,252,60,228,236,54,65,108,0,0,47,
    59,170,193,64,65,108,0,0,32,55,153,217,68,65,108,247,111,27,55,153,217,68,65,108,0,0,16,55,151,217,68,65,108,0,76,126,60,56,176,78,65,108,0,234,124,61,133,128,88,65,108,0,229,13,62,56,68,98,65,108,0,178,123,62,18,245,107,65,108,192,45,196,62,222,140,
    117,65,108,192,225,12,63,121,5,127,65,108,224,49,63,63,106,44,132,65,108,0,231,120,63,124,192,136,65,108,24,238,156,63,4,60,141,65,108,248,243,192,63,36,156,145,65,108,0,110,232,63,16,222,149,65,108,132,161,9,64,13,255,153,65,108,200,171,32,64,119,252,
    157,65,108,20,71,57,64,194,211,161,65,108,160,99,83,64,118,130,165,65,108,188,240,110,64,57,6,169,65,108,102,238,133,64,204,92,172,65,108,164,10,149,64,13,132,175,65,108,111,195,164,64,246,121,178,65,108,183,14,181,64,162,60,181,65,108,17,226,197,64,
    78,202,183,65,108,181,50,215,64,88,33,186,65,108,145,245,232,64,62,64,188,65,108,71,31,251,64,168,37,190,65,108,28,210,6,65,92,208,191,65,108,70,60,16,65,76,63,193,65,108,26,200,25,65,140,113,194,65,108,125,111,35,65,88,102,195,65,108,163,25,37,65,27,
    138,195,65,108,163,25,37,65,27,138,195,65,108,163,25,37,65,101,230,87,65,108,224,93,96,65,101,230,87,65,108,224,93,96,65,153,219,195,65,108,224,93,96,65,153,219,195,65,108,249,18,106,65,98,12,195,65,108,64,176,115,65,84,255,193,65,108,143,47,125,65,27,
    181,192,65,108,105,69,131,65,137,46,191,65,108,6,222,135,65,152,108,189,65,108,174,94,140,65,106,112,187,65,108,126,196,144,65,66,59,185,65,108,168,12,149,65,139,206,182,65,108,110,52,153,65,209,43,180,65,108,37,57,157,65,196,84,177,65,108,62,24,161,
    65,54,75,174,65,108,61,207,164,65,24,17,171,65,108,194,91,168,65,123,168,167,65,108,135,187,171,65,140,19,164,65,108,100,236,174,65,152,84,160,65,108,78,236,177,65,2,110,156,65,108,90,185,180,65,75,98,152,65,108,190,81,183,65,9,52,148,65,108,206,179,
    185,65,232,229,143,65,108,7,222,187,65,171,122,139,65,108,4,207,189,65,37,245,134,65,108,136,133,191,65,58,88,130,65,108,123,0,193,65,188,77,123,65,108,233,62,194,65,36,200,113,65,108,7,64,195,65,196,37,104,65,108,49,3,196,65,197,108,94,65,108,233,135,
    196,65,96,163,84,65,108,219,205,196,65,217,207,74,65,108,158,217,196,65,154,217,68,65,108,158,217,196,65,153,217,68,65,108,158,217,196,65,153,217,68,65,108,33,186,196,65,248,2,59,65,108,189,91,196,65,163,50,49,65,108,175,190,195,65,225,110,39,65,108,
    92,227,194,65,241,189,29,65,108,80,202,193,65,8,38,20,65,108,62,116,192,65,72,173,10,65,108,2,226,190,65,194,89,1,65,108,156,20,189,65,216,98,240,64,108,54,13,187,65,70,116,222,64,108,24,205,184,65,71,243,204,64,108,183,85,182,65,15,235,187,64,108,164,
    168,179,65,129,102,171,64,108,151,199,176,65,48,112,155,64,108,102,180,173,65,86,18,140,64,108,12,113,170,65,136,173,122,64,108,155,255,166,65,212,141,94,64,108,74,98,163,65,140,215,67,64,108,105,155,159,65,200,155,42,64,108,97,173,155,65,180,234,18,
    64,108,184,154,151,65,216,166,249,63,108,6,102,147,65,56,200,208,63,108,0,18,143,65,168,83,171,63,108,104,161,138,65,40,97,137,63,108,22,23,134,65,192,12,86,63,108,241,117,129,65,160,173,32,63,108,226,129,121,65,0,142,229,62,108,49,246,111,65,96,236,
    152,62,108,234,78,102,65,64,79,55,62,108,58,146,92,65,0,156,183,61,108,92,198,82,65,0,120,252,60,108,149,241,72,65,0,80,46,59,108,158,217,68,65,0,0,128,181,108,158,217,68,65,36,213,58,181,99,101,0,0 };

  path.loadPathFromData(pathData, sizeof(pathData));

  static const unsigned char knobBackgroundPathData[] = { 110,109,159,192,226,65,141,107,220,66,98,145,172,191,65,33,16,223,66,218,142,216,65,163,95,228,66,87,240,179,65,28,168,228,66,98,212,81,143,65,149,240,228,66,240,215,166,65,69,65,223,66,211,45,131,65,179,40,221,66,98,108,7,63,65,33,16,219,66,10,227,84,
65,200,197,226,66,4,84,20,65,188,112,222,66,98,251,137,167,64,176,27,218,66,218,64,19,65,28,32,216,66,162,186,187,64,41,218,209,66,98,34,231,33,64,54,148,203,66,212,136,228,63,44,159,211,66,72,56,32,191,196,213,203,66,98,142,96,66,192,92,12,196,66,252,
10,101,63,135,76,198,66,81,126,218,190,132,135,189,66,98,167,196,223,191,129,194,180,66,86,233,140,192,19,251,186,66,232,112,145,192,114,211,177,66,98,122,248,149,192,209,171,168,66,196,13,236,191,88,141,174,66,84,210,75,191,209,162,165,66,98,196,237,
128,62,74,184,156,66,75,151,102,192,189,115,159,66,88,235,183,191,221,97,151,66,98,196,175,58,63,252,79,143,66,188,60,220,63,120,63,151,66,94,110,155,64,7,147,144,66,98,142,205,255,64,150,230,137,66,76,60,126,64,128,105,136,66,162,180,251,64,236,150,
131,66,98,142,37,60,65,176,136,125,66,55,36,42,65,115,161,134,66,83,76,112,65,222,252,131,66,98,55,58,155,65,74,88,129,66,238,87,130,65,142,17,120,66,113,246,166,65,156,128,119,66,98,244,148,203,65,170,239,118,66,216,14,180,65,37,39,129,66,245,184,215,
65,184,63,131,66,98,18,99,251,65,74,88,133,66,67,117,240,65,69,69,123,66,99,94,8,66,175,247,129,66,98,36,130,24,66,188,76,134,66,46,163,8,66,79,72,136,66,16,252,21,66,66,142,142,66,98,242,84,35,66,53,212,148,66,30,79,38,66,63,201,140,66,70,244,47,66,
166,146,148,66,98,110,153,57,66,14,92,156,66,57,223,41,66,227,27,154,66,97,40,47,66,230,224,162,66,98,138,113,52,66,234,165,171,66,143,16,63,66,87,109,165,66,129,161,63,66,248,148,174,66,98,115,50,64,66,153,188,183,66,210,211,52,66,18,219,177,66,173,
162,48,66,153,197,186,66,98,136,113,44,66,32,176,195,66,216,220,59,66,173,244,192,66,190,50,51,66,141,6,201,66,98,164,136,42,66,110,24,209,66,125,145,38,66,245,40,201,66,152,5,26,66,99,213,207,66,98,178,121,13,66,212,129,214,66,159,143,29,66,233,254,
215,66,208,252,13,66,126,209,220,66,98,1,212,252,65,17,164,225,66,87,234,2,66,247,198,217,66,160,192,226,65,140,107,220,66,99,101,0,0 };

  knobBackground.loadPathFromData(knobBackgroundPathData, sizeof(knobBackgroundPathData));

  static const unsigned char pathRectData[] = { 110,109,2,162,154,66,244,27,154,66,108,19,184,156,66,244,27,154,66,98,146,66,158,66,244,27,154,66,40,128,159,66,139,89,155,66,40,128,159,66,9,228,156,66,108,40,128,159,66,95,101,201,66,98,40,128,159,66,222,239,202,66,145,66,158,66,117,45,204,66,18,184,
156,66,117,45,204,66,108,1,162,154,66,117,45,204,66,98,130,23,153,66,117,45,204,66,236,217,151,66,222,239,202,66,236,217,151,66,95,101,201,66,108,236,217,151,66,9,228,156,66,98,236,217,151,66,138,89,155,66,131,23,153,66,244,27,154,66,2,162,154,66,244,
27,154,66,99,101,0,0 };


  knobRect.loadPathFromData(pathRectData, sizeof(pathRectData));
  knobOffset = 3.14f;

}

void CustomLookAndFeel::drawRotarySlider(Graphics& g, int x, int y, int width, int height, float sliderPos,
    const float rotaryStartAngle, const float rotaryEndAngle, Slider& slider)
{   
    juce::Rectangle<float> rect(x, y, width, height);
    auto transform = juce::AffineTransform::rotation(juce::jmap(sliderPos, rotaryStartAngle + knobOffset, rotaryEndAngle + knobOffset),
        rect.getCentreX(), rect.getCentreY());



    knobBackground.scaleToFit(x, y, width, height, true);
    g.setColour(juce::Colour(26,26,26));
    g.fillPath(knobBackground, transform);

    knobPath.scaleToFit(x + 1, y + 1, width - 2, height - 2, true);
    g.setGradientFill(juce::ColourGradient(juce::Colour(20, 24, 29), rect.getWidth() / 2, 0.f,
        juce::Colour(3,0,4),
        rect.getWidth() /2,
        rect.getHeight(),
        false));
    g.fillPath(knobPath, transform);

    knobRect.scaleToFit(rect.getCentreX() - width/12, rect.getCentreY(), width / 6, height / 2 - 1, false);
    g.setColour(juce::Colours::beige);
    g.fillPath(knobRect, transform);
}